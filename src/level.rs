use {
    super::{
        asset_owner::TextureAtlasOwner,
        player::{self, Player},
        tile::{self, Tile, TileIndex, TILE_SIZE},
        GameState,
    },
    bevy::prelude::*,
};

pub const LEVEL_SIZE: Vec2 = Vec2::new(22., 27.);

use TileIndex::*;
const LEVEL_LAYOUT: [[TileIndex; LEVEL_SIZE.x as usize]; LEVEL_SIZE.y as usize] = [
    [Grass1; LEVEL_SIZE.x as usize],
    [Grass1; LEVEL_SIZE.x as usize],
    [Grass1; LEVEL_SIZE.x as usize],
    [Grass1; LEVEL_SIZE.x as usize],
    [
        Grass1,
        Grass1,
        Grass1,
        Grass1,
        Grass1,
        Grass1,
        Grass1,
        Grass1,
        WallTopLeft,
        WallTop,
        WallTop,
        WallTop,
        WallTop,
        WallTopRight,
        Grass1,
        Grass1,
        Grass1,
        Grass1,
        Grass1,
        Grass1,
        Grass1,
        Grass1,
    ],
    [
        Grass1, Grass1, Grass1, Grass1, Grass1, Grass1, Grass1, Grass1, WallLeft, Floor1, Floor1,
        Floor1, Floor1, WallRight, Grass1, Grass1, Grass1, Grass1, Grass1, Grass1, Grass1, Grass1,
    ],
    [
        Grass1, Grass1, Grass1, Grass1, Grass1, Grass1, Grass1, Grass1, WallLeft, Floor1, Floor1,
        Floor1, Floor1, WallRight, Grass1, Grass1, Grass1, Grass1, Grass1, Grass1, Grass1, Grass1,
    ],
    [
        Grass1,
        Grass1,
        Grass1,
        Grass1,
        WallTopLeft,
        WallTop,
        WallTop,
        WallTop,
        CornerTopLeft,
        Floor1,
        Floor1,
        Floor1,
        Floor1,
        CornerTopRight,
        WallTop,
        WallTop,
        WallTop,
        WallTopRight,
        Grass1,
        Grass1,
        Grass1,
        Grass1,
    ],
    [
        Grass1,
        Grass1,
        Grass1,
        Grass1,
        WallLeft,
        Floor1,
        Floor1,
        Floor1,
        WallTopLeft,
        WallTop,
        Floor1,
        Floor1,
        WallTopRight,
        Floor1,
        Floor1,
        Floor1,
        Floor1,
        WallRight,
        Grass1,
        Grass1,
        Grass1,
        Grass1,
    ],
    [
        Grass1, Grass1, Grass1, Grass1, WallLeft, Floor1, Floor1, Floor1, WallLeft, Floor1, Floor1,
        Floor1, Floor1, Floor1, Floor1, Floor1, Floor1, WallRight, Grass1, Grass1, Grass1, Grass1,
    ],
    [
        Grass1,
        Grass1,
        Grass1,
        Grass1,
        WallBottomLeft,
        WallBottom,
        WallBottom,
        WallBottom,
        WallLeft,
        Floor1,
        Floor1,
        Floor1,
        Floor1,
        Floor1,
        Floor1,
        Floor1,
        Floor1,
        WallRight,
        Grass1,
        Grass1,
        Grass1,
        Grass1,
    ],
    [
        Grass1, Grass1, Grass1, Grass1, WallLeft, Floor1, Floor1, Floor1, WallLeft, Floor1, Floor1,
        Floor1, Floor1, Floor1, Floor1, Floor1, Floor1, WallRight, Grass1, Grass1, Grass1, Grass1,
    ],
    [
        Grass1,
        Grass1,
        Grass1,
        Grass1,
        WallLeft,
        Floor1,
        Floor1,
        Floor1,
        WallBottomLeft,
        WallBottom,
        Floor1,
        WallBottom,
        WallBottomRight,
        Floor1,
        Floor1,
        Floor1,
        Floor1,
        WallRight,
        Grass1,
        Grass1,
        Grass1,
        Grass1,
    ],
    [
        Grass1, Grass1, Grass1, Grass1, WallLeft, Floor1, Floor1, Floor1, WallLeft, WallBottom,
        Floor1, Floor1, Floor1, Floor1, Floor1, Floor1, Floor1, WallRight, Grass1, Grass1, Grass1,
        Grass1,
    ],
    [
        Grass1,
        Grass1,
        Grass1,
        Grass1,
        WallLeft,
        Floor1,
        Floor1,
        Floor1,
        WallLeft,
        WallLeft,
        Floor1,
        WallRight,
        WallTop,
        Floor1,
        WallBottomLeft,
        WallBottomRight,
        Floor1,
        WallTopRight,
        Grass1,
        Grass1,
        Grass1,
        Grass1,
    ],
    [
        Grass1,
        Grass1,
        Grass1,
        Grass1,
        WallTopLeft,
        Floor1,
        WallTopRight,
        Floor1,
        WallLeft,
        WallLeft,
        Floor1,
        WallRight,
        Floor1,
        Floor1,
        Floor1,
        WallLeft,
        Floor1,
        WallRight,
        Grass1,
        Grass1,
        Grass1,
        Grass1,
    ],
    [
        Grass1,
        Grass1,
        Grass1,
        Grass1,
        WallBottomLeft,
        Floor1,
        WallRight,
        Floor1,
        WallLeft,
        WallLeft,
        Floor1,
        WallRight,
        Floor1,
        Floor1,
        Floor1,
        WallLeft,
        Floor1,
        WallRight,
        Grass1,
        Grass1,
        Grass1,
        Grass1,
    ],
    [
        Grass1,
        Grass1,
        Grass1,
        Grass1,
        WallLeft,
        Floor1,
        WallRight,
        Floor1,
        Floor1,
        Floor1,
        Floor1,
        WallRight,
        WallTop,
        WallTop,
        WallTop,
        WallTop,
        WallTop,
        WallTopRight,
        Grass1,
        Grass1,
        Grass1,
        Grass1,
    ],
    [
        Grass1, Grass1, Grass1, Grass1, UWall, Floor1, UWall, WallBottom, WallLeft, WallLeft,
        Floor1, WallRight, Floor1, Floor1, Floor1, Floor1, Floor1, WallRight, Grass1, Grass1,
        Grass1, Grass1,
    ],
    [
        Grass1,
        Grass1,
        Grass1,
        Grass1,
        WallLeft,
        Floor1,
        Floor1,
        Floor1,
        WallBottomLeft,
        WallBottomLeft,
        Floor1,
        WallBottomRight,
        Floor1,
        Floor1,
        Floor1,
        Floor1,
        Floor1,
        WallRight,
        Grass1,
        Grass1,
        Grass1,
        Grass1,
    ],
    [
        Grass1,
        Grass1,
        Grass1,
        Grass1,
        WallBottomLeft,
        WallBottom,
        WallBottom,
        WallBottom,
        WallLeft,
        Gravel1,
        Gravel1,
        WallRight,
        Floor1,
        Floor1,
        Floor1,
        Floor1,
        Floor1,
        WallRight,
        Grass1,
        Grass1,
        Grass1,
        Grass1,
    ],
    [
        Grass1, Grass1, Grass1, Grass1, Grass1, Grass1, Grass1, Grass1, Gravel1, Gravel1, Gravel1,
        WallRight, Floor1, Floor1, Floor1, Floor1, Floor1, WallRight, Grass1, Grass1, Grass1,
        Grass1,
    ],
    [
        Grass1,
        Grass1,
        Grass1,
        Grass1,
        Grass1,
        Grass1,
        Grass1,
        Grass1,
        Grass1,
        Gravel1,
        Gravel1,
        WallRight,
        WallBottom,
        Floor1,
        Floor1,
        Floor1,
        Floor1,
        WallBottomRight,
        Grass1,
        Grass1,
        Grass1,
        Grass1,
    ],
    [Grass1; LEVEL_SIZE.x as usize],
    [Grass1; LEVEL_SIZE.x as usize],
    [Grass1; LEVEL_SIZE.x as usize],
    [Grass1; LEVEL_SIZE.x as usize],
];

pub fn spawn_level_objects(
    mut cmds: Commands,
    tile_tex_atlas: Res<TextureAtlasOwner<Tile>>,
    player_tex_atlas: Res<TextureAtlasOwner<Player>>,
) {
    for y in 0..LEVEL_SIZE.y as usize {
        for x in 0..LEVEL_SIZE.x as usize {
            let pos = (Transform::from_translation(
                (-Vec2::new(LEVEL_SIZE.x - 1., LEVEL_SIZE.y - 1.) * TILE_SIZE / 2.)
                    .extend(default()),
            ) * Transform::from_translation(
                (Vec2::new(x as f32, LEVEL_SIZE.y - y as f32 - 1.) * TILE_SIZE).extend(default()),
            ))
            .translation
            .truncate();
            if x == LEVEL_SIZE.x as usize / 2 && y == LEVEL_SIZE.y as usize / 2 {
                player::spawn_player(&mut cmds, pos, &player_tex_atlas);
            }
            tile::spawn_tile(&mut cmds, pos, &tile_tex_atlas, LEVEL_LAYOUT[y][x] as usize);
        }
    }
}

pub fn level_plugin(app: &mut App) {
    app.add_systems(OnEnter(GameState::Playing), spawn_level_objects);
}
